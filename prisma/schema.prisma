generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GamePokemonAvailability {
  CHOICE // Can be obtained in the game but will lock other Pokemon out from being obtained natively.
  EVENT // Can be obtained in the game via a wi-fi/mystery event.
  EXTERNAL // Can be obtained in the game if an external requirement is met.
  NATIVE // Can be obtained in the game with no restrictions.
  UNAVAILABLE // Cannot be obtained in the game by any means except trading.
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

enum RegionDex {
  RBY
  GSC
  RSE
  FRLG
  DP
  PLATINUM
  HGSS
  BW
  BW2
  LETSGO
  NATIONAL
}

enum ElementalType {
  BUG
  DARK
  DRAGON
  ELECTRIC
  FAIRY
  FIGHTING
  FIRE
  FLYING
  GHOST
  GRASS
  GROUND
  ICE
  NORMAL
  POISON
  PSYCHIC
  ROCK
  STEEL
  STELLAR
  UNKNOWN
  WATER
}

model Console {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  games     Game[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Evolution {
  id           Int      @id @default(autoincrement())
  before       Pokemon  @relation("BeforeEvolution", fields: [beforeId, beforeName, beforeGender], references: [id, speciesFormName, gender])
  beforeName   String
  beforeGender Gender
  after        Pokemon  @relation("AfterEvolution", fields: [afterId, afterName, afterGender], references: [id, speciesFormName, gender])
  afterName    String
  afterGender  Gender
  tradeEvo     Boolean  @default(false)
  beforeId     Int
  afterId      Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Game {
  id                Int                     @id @default(autoincrement())
  title             String                  @unique
  consoles          Console[]
  generation        Int
  releaseDate       DateTime
  regionDex         RegionDex
  compatiblePokemon GameCompatiblePokemon[] // All Pokemon that can be registered in the game.
  gameChoiceLocks   GameChoiceLocks[]
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt

  @@unique([id, title])
}

model GameCompatiblePokemon {
  id               Int                     @id @default(autoincrement())
  game             Game                    @relation(fields: [gameId, gameTitle], references: [id, title])
  gameTitle        String
  pokemon          Pokemon                 @relation(fields: [pokemonId, pokemonName, pokemonGender], references: [id, speciesFormName, gender])
  pokemonName      String
  pokemonGender    Gender
  availability     GamePokemonAvailability @default(NATIVE)
  availabilityInfo String?
  shinyInfo        String?
  shinyLocked      Boolean                 @default(false)
  gameId           Int
  pokemonId        Int
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
}

model GameChoiceLocks {
  id          Int       @id @default(autoincrement())
  games       Game[]
  pokemon     Pokemon[]
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// The most specific form a Pokemon can be before getting to individuals, e.g. male Hoenn Cap Pikachu
model Pokemon {
  id              Int                     @id @default(autoincrement())
  speciesForm     SpeciesForm             @relation(fields: [speciesFormId, speciesFormName], references: [id, name])
  speciesFormName String
  gender          Gender
  canBeShiny      Boolean                 @default(true)
  imageUrl        String
  shinyUrl        String?
  evolutions      Evolution[]             @relation("AfterEvolution")
  prevolutions    Evolution[]             @relation("BeforeEvolution")
  gameChoiceLocks GameChoiceLocks[]
  compatibleGames GameCompatiblePokemon[]
  speciesFormId   Int
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  @@unique([speciesFormId, gender])
  @@unique([id, speciesFormName])
  @@unique([id, speciesFormName, gender])
}

model RegionDexSpecies {
  id          Int       @id @default(autoincrement())
  regionDex   RegionDex
  index       Int
  species     Species   @relation(fields: [speciesId, speciesName], references: [id, name])
  speciesName String
  speciesId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([regionDex, index])
}

// A species of Pokemon, e.g. Pikachu, Articuno
model Species {
  id           Int                @id @default(autoincrement())
  dexNum       Int                @unique
  name         String
  japaneseName String             @default("")
  speciesForms SpeciesForm[]
  regionDexes  RegionDexSpecies[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@unique([id, name])
}

// A form of a Pokemon species, e.g. Hoenn Cap Pikachu, Galarian Articuno
model SpeciesForm {
  id               Int            @id @default(autoincrement())
  name             String
  species          Species        @relation(fields: [speciesId, speciesName], references: [id, name])
  speciesName      String
  isSpeciesDefault Boolean        @default(false)
  prefix           String?
  type             ElementalType
  type2            ElementalType?
  /// Whether the form has a unique sprite/image for each gender.
  gendersUnique    Boolean        @default(false)
  pokemon          Pokemon[]
  speciesId        Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([id, name])
}
